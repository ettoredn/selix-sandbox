# find -type f -print0 | xargs -0 egrep -n -w '^(extern{1} PHPAPI|PHPAPI)' | cut -d"/" -f2- | egrep '[[:alnum:]]+\.h:' | sed 's/:[0-9]*//'
php_scandir.h:PHPAPI int php_scandir(const char *dirname, struct dirent **namelist[], int (*selector) (const struct dirent *entry), int (*compare) (const struct dirent **a, const struct dirent **b));
php_scandir.h:PHPAPI int php_alphasort(const struct dirent **a, const struct dirent **b);
snprintf.h:PHPAPI int ap_php_slprintf(char *buf, size_t len, const char *format,...);
snprintf.h:PHPAPI int ap_php_vslprintf(char *buf, size_t len, const char *format, va_list ap);
snprintf.h:PHPAPI int ap_php_snprintf(char *, size_t, const char *, ...);
snprintf.h:PHPAPI int ap_php_vsnprintf(char *, size_t, const char *, va_list ap);
snprintf.h:PHPAPI int ap_php_vasprintf(char **buf, const char *format, va_list ap);
snprintf.h:PHPAPI int ap_php_asprintf(char **buf, const char *format, ...);
snprintf.h:PHPAPI int php_sprintf (char* s, const char* format, ...) PHP_ATTRIBUTE_FORMAT(printf, 2, 3);
snprintf.h:PHPAPI char * php_gcvt(double value, int ndigit, char dec_point, char exponent, char *buf);
snprintf.h:PHPAPI char * php_conv_fp(register char format, register double num,
php_reentrancy.h:PHPAPI int php_readdir_r(DIR *dirp, struct dirent *entry,
php_reentrancy.h:PHPAPI struct tm *php_localtime_r(const time_t *const timep, struct tm *p_tm);
php_reentrancy.h:PHPAPI char *php_ctime_r(const time_t *clock, char *buf);
php_reentrancy.h:PHPAPI char *php_asctime_r(const struct tm *tm, char *buf);
php_reentrancy.h:PHPAPI struct tm *php_gmtime_r(const time_t *const timep, struct tm *p_tm);
php_reentrancy.h:PHPAPI char *php_strtok_r(char *s, const char *delim, char **last);
php_reentrancy.h:PHPAPI int php_rand_r(unsigned int *seed);
php_memory_streams.h:PHPAPI php_stream *_php_stream_memory_create(int mode STREAMS_DC TSRMLS_DC);
php_memory_streams.h:PHPAPI php_stream *_php_stream_memory_open(int mode, char *buf, size_t length STREAMS_DC TSRMLS_DC);
php_memory_streams.h:PHPAPI char *_php_stream_memory_get_buffer(php_stream *stream, size_t *length STREAMS_DC TSRMLS_DC);
php_memory_streams.h:PHPAPI php_stream *_php_stream_temp_create(int mode, size_t max_memory_usage STREAMS_DC TSRMLS_DC);
php_memory_streams.h:PHPAPI php_stream *_php_stream_temp_open(int mode, size_t max_memory_usage, char *buf, size_t length STREAMS_DC TSRMLS_DC);
php_memory_streams.h:extern PHPAPI php_stream_ops php_stream_memory_ops;
php_memory_streams.h:extern PHPAPI php_stream_ops php_stream_temp_ops;
php_memory_streams.h:extern PHPAPI php_stream_ops php_stream_rfc2397_ops;
php_memory_streams.h:extern PHPAPI php_stream_wrapper php_stream_rfc2397_wrapper;
php_streams.h:PHPAPI int php_file_le_stream(void);
php_streams.h:PHPAPI int php_file_le_pstream(void);
php_streams.h:PHPAPI int php_file_le_stream_filter(void);
php_streams.h:PHPAPI php_stream *_php_stream_alloc(php_stream_ops *ops, void *abstract,
php_streams.h:PHPAPI int php_stream_from_persistent_id(const char *persistent_id, php_stream **stream TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_free(php_stream *stream, int close_options TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_seek(php_stream *stream, off_t offset, int whence TSRMLS_DC);
php_streams.h:PHPAPI off_t _php_stream_tell(php_stream *stream TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_read(php_stream *stream, char *buf, size_t count TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_write(php_stream *stream, const char *buf, size_t count TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_printf(php_stream *stream TSRMLS_DC, const char *fmt, ...) PHP_ATTRIBUTE_FORMAT(printf, 3, 4);
php_streams.h:PHPAPI size_t _php_stream_printf(php_stream *stream TSRMLS_DC, const char *fmt, ...) PHP_ATTRIBUTE_FORMAT(printf, 2, 3);
php_streams.h:PHPAPI int _php_stream_eof(php_stream *stream TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_getc(php_stream *stream TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_putc(php_stream *stream, int c TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_flush(php_stream *stream, int closing TSRMLS_DC);
php_streams.h:PHPAPI char *_php_stream_get_line(php_stream *stream, char *buf, size_t maxlen, size_t *returned_len TSRMLS_DC);
php_streams.h:PHPAPI char *php_stream_get_record(php_stream *stream, size_t maxlen, size_t *returned_len, char *delim, size_t delim_len TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_puts(php_stream *stream, char *buf TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_stat(php_stream *stream, php_stream_statbuf *ssb TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_stat_path(char *path, int flags, php_stream_statbuf *ssb, php_stream_context *context TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_mkdir(char *path, int mode, int options, php_stream_context *context TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_rmdir(char *path, int options, php_stream_context *context TSRMLS_DC);
php_streams.h:PHPAPI php_stream *_php_stream_opendir(char *path, int options, php_stream_context *context STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI php_stream_dirent *_php_stream_readdir(php_stream *dirstream, php_stream_dirent *ent TSRMLS_DC);
php_streams.h:PHPAPI int php_stream_dirent_alphasort(const char **a, const char **b);
php_streams.h:PHPAPI int php_stream_dirent_alphasortr(const char **a, const char **b);
php_streams.h:PHPAPI int _php_stream_scandir(char *dirname, char **namelist[], int flags, php_stream_context *context,
php_streams.h:PHPAPI int _php_stream_set_option(php_stream *stream, int option, int value, void *ptrparam TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_truncate_set_size(php_stream *stream, size_t newsize TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_copy_to_stream(php_stream *src, php_stream *dest, size_t maxlen STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_copy_to_stream_ex(php_stream *src, php_stream *dest, size_t maxlen, size_t *len STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI size_t _php_stream_copy_to_mem(php_stream *src, char **buf, size_t maxlen,
php_streams.h:PHPAPI size_t _php_stream_passthru(php_stream * src STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI int _php_stream_cast(php_stream *stream, int castas, void **ret, int show_err TSRMLS_DC);
php_streams.h:PHPAPI int php_register_url_stream_wrapper(char *protocol, php_stream_wrapper *wrapper TSRMLS_DC);
php_streams.h:PHPAPI int php_unregister_url_stream_wrapper(char *protocol TSRMLS_DC);
php_streams.h:PHPAPI int php_register_url_stream_wrapper_volatile(char *protocol, php_stream_wrapper *wrapper TSRMLS_DC);
php_streams.h:PHPAPI int php_unregister_url_stream_wrapper_volatile(char *protocol TSRMLS_DC);
php_streams.h:PHPAPI php_stream *_php_stream_open_wrapper_ex(char *path, char *mode, int options, char **opened_path, php_stream_context *context STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI php_stream_wrapper *php_stream_locate_url_wrapper(const char *path, char **path_for_open, int options TSRMLS_DC);
php_streams.h:PHPAPI char *php_stream_locate_eol(php_stream *stream, char *buf, size_t buf_len TSRMLS_DC);
php_streams.h:PHPAPI void php_stream_wrapper_log_error(php_stream_wrapper *wrapper, int options TSRMLS_DC, const char *fmt, ...) PHP_ATTRIBUTE_FORMAT(printf, 4, 5);
php_streams.h:PHPAPI void php_stream_wrapper_log_error(php_stream_wrapper *wrapper, int options TSRMLS_DC, const char *fmt, ...) PHP_ATTRIBUTE_FORMAT(printf, 3, 4);
php_streams.h:PHPAPI int _php_stream_make_seekable(php_stream *origstream, php_stream **newstream, int flags STREAMS_DC TSRMLS_DC);
php_streams.h:PHPAPI HashTable *_php_stream_get_url_stream_wrappers_hash(TSRMLS_D);
php_streams.h:PHPAPI HashTable *php_stream_get_url_stream_wrappers_hash_global(void);
php_streams.h:PHPAPI HashTable *_php_get_stream_filters_hash(TSRMLS_D);
php_streams.h:PHPAPI HashTable *php_get_stream_filters_hash_global(void);
php_network.h:PHPAPI char *php_socket_strerror(long err, char *buf, size_t bufsize);
php_network.h:PHPAPI int php_poll2(php_pollfd *ufds, unsigned int nfds, int timeout);
php_network.h:PHPAPI void _php_emit_fd_setsize_warning(int max_fd);
php_network.h:PHPAPI php_socket_t php_network_connect_socket_to_host(const char *host, unsigned short port,
php_network.h:PHPAPI int php_network_connect_socket(php_socket_t sockfd,
php_network.h:PHPAPI php_socket_t php_network_bind_socket_to_local_addr(const char *host, unsigned port,
php_network.h:PHPAPI php_socket_t php_network_accept_incoming(php_socket_t srvsock,
php_network.h:PHPAPI int php_network_get_sock_name(php_socket_t sock, 
php_network.h:PHPAPI int php_network_get_peer_name(php_socket_t sock, 
php_network.h:PHPAPI void php_any_addr(int family, php_sockaddr_storage *addr, unsigned short port);
php_network.h:PHPAPI int php_sockaddr_size(php_sockaddr_storage *addr);
php_network.h:PHPAPI extern php_stream_ops php_stream_socket_ops;
php_network.h:PHPAPI php_stream *_php_stream_sock_open_from_socket(php_socket_t socket, const char *persistent_id STREAMS_DC TSRMLS_DC );
php_network.h:PHPAPI php_stream *_php_stream_sock_open_host(const char *host, unsigned short port,
php_network.h:PHPAPI void php_network_populate_name_from_sockaddr(
php_network.h:PHPAPI int php_network_parse_network_address_with_port(const char *addr,
php_getopt.h:extern PHPAPI int php_optidx;
php_getopt.h:PHPAPI int php_getopt(int argc, char* const *argv, const opt_struct opts[], char **optarg, int *optind, int show_err, int arg_start);
php_globals.h:extern PHPAPI int core_globals_id;
spprintf.h:PHPAPI int spprintf( char **pbuf, size_t max_len, const char *format, ...) PHP_ATTRIBUTE_FORMAT(printf, 3, 4);
spprintf.h:PHPAPI int vspprintf(char **pbuf, size_t max_len, const char *format, va_list ap) PHP_ATTRIBUTE_FORMAT(printf, 3, 0);
php_main.h:PHPAPI int php_request_startup(TSRMLS_D);
php_main.h:PHPAPI void php_request_shutdown(void *dummy);
php_main.h:PHPAPI void php_request_shutdown_for_exec(void *dummy);
php_main.h:PHPAPI int php_module_startup(sapi_module_struct *sf, zend_module_entry *additional_modules, uint num_additional_modules);
php_main.h:PHPAPI void php_module_shutdown(TSRMLS_D);
php_main.h:PHPAPI void php_module_shutdown_for_exec(void);
php_main.h:PHPAPI int php_module_shutdown_wrapper(sapi_module_struct *sapi_globals);
php_main.h:PHPAPI int php_request_startup_for_hook(TSRMLS_D);
php_main.h:PHPAPI int php_register_extensions(zend_module_entry **ptr, int count TSRMLS_DC);
php_main.h:PHPAPI int php_execute_script(zend_file_handle *primary_file TSRMLS_DC);
php_main.h:PHPAPI int php_execute_simple_script(zend_file_handle *primary_file, zval **ret TSRMLS_DC);
php_main.h:PHPAPI int php_handle_special_queries(TSRMLS_D);
php_main.h:PHPAPI int php_lint_script(zend_file_handle *file TSRMLS_DC);
php_main.h:PHPAPI void php_handle_aborted_connection(void);
php_main.h:PHPAPI int php_handle_auth_data(const char *auth TSRMLS_DC);
php_main.h:PHPAPI void php_html_puts(const char *str, uint siz TSRMLS_DC);
php_main.h:PHPAPI int php_stream_open_for_zend_ex(const char *filename, zend_file_handle *handle, int mode TSRMLS_DC);
php_ticks.h:PHPAPI void php_add_tick_function(void (*func)(int));
php_ticks.h:PHPAPI void php_remove_tick_function(void (*func)(int));
php.h:PHPAPI size_t php_strlcpy(char *dst, const char *src, size_t siz);
php.h:PHPAPI size_t php_strlcat(char *dst, const char *src, size_t siz);
php.h:PHPAPI int php_write(void *buf, uint size TSRMLS_DC);
php.h:PHPAPI int php_printf(const char *format, ...) PHP_ATTRIBUTE_FORMAT(printf, 1,
php.h:PHPAPI void php_log_err(char *log_message TSRMLS_DC);
php.h:PHPAPI void php_verror(const char *docref, const char *params, int type, const char *format, va_list args TSRMLS_DC) PHP_ATTRIBUTE_FORMAT(printf, 4, 0);
php.h:PHPAPI void php_error_docref0(const char *docref TSRMLS_DC, int type, const char *format, ...)
php.h:PHPAPI void php_error_docref1(const char *docref TSRMLS_DC, const char *param1, int type, const char *format, ...)
php.h:PHPAPI void php_error_docref2(const char *docref TSRMLS_DC, const char *param1, const char *param2, int type, const char *format, ...)
php.h:PHPAPI void php_win32_docref2_from_error(DWORD error, const char *param1, const char *param2 TSRMLS_DC);
php.h:PHPAPI extern int (*php_register_internal_extensions_func)(TSRMLS_D);
php.h:PHPAPI int php_register_internal_extensions(TSRMLS_D);
php.h:PHPAPI int php_mergesort(void *base, size_t nmemb, register size_t size, int (*cmp)(const void *, const void * TSRMLS_DC) TSRMLS_DC);
php.h:PHPAPI void php_register_pre_request_shutdown(void (*func)(void *), void *userdata);
php.h:PHPAPI void php_com_initialize(TSRMLS_D);
streams/php_stream_plain_wrapper.h:PHPAPI extern php_stream_ops php_stream_stdio_ops;
streams/php_stream_plain_wrapper.h:PHPAPI extern php_stream_wrapper php_plain_files_wrapper;
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen(const char *filename, const char *mode, char **opened_path, int options STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_with_path(char *filename, char *mode, char *path, char **opened_path, int options STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_from_file(FILE *file, const char *mode STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_from_fd(int fd, const char *mode, const char *persistent_id STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_from_pipe(FILE *file, const char *mode STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_tmpfile(int dummy STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI php_stream *_php_stream_fopen_temporary_file(const char *dir, const char *pfx, char **opened_path STREAMS_DC TSRMLS_DC);
streams/php_stream_plain_wrapper.h:PHPAPI FILE * _php_stream_open_wrapper_as_file(char * path, char * mode, int options, char **opened_path STREAMS_DC TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI int php_stream_xport_register(char *protocol, php_stream_transport_factory factory TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI int php_stream_xport_unregister(char *protocol TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI php_stream *_php_stream_xport_create(const char *name, long namelen, int options,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_bind(php_stream *stream,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_connect(php_stream *stream,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_listen(php_stream *stream,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_accept(php_stream *stream, php_stream **client,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_get_name(php_stream *stream, int want_peer,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_recvfrom(php_stream *stream, char *buf, size_t buflen,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_sendto(php_stream *stream, const char *buf, size_t buflen,
streams/php_stream_transport.h:PHPAPI int php_stream_xport_shutdown(php_stream *stream, stream_shutdown_t how TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI int php_stream_xport_crypto_setup(php_stream *stream, php_stream_xport_crypt_method_t crypto_method, php_stream *session_stream TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI int php_stream_xport_crypto_enable(php_stream *stream, int activate TSRMLS_DC);
streams/php_stream_transport.h:PHPAPI HashTable *php_stream_xport_get_hash(void);
streams/php_stream_transport.h:PHPAPI php_stream_transport_factory_func php_stream_generic_socket_factory;
streams/php_stream_glob_wrapper.h:PHPAPI extern php_stream_wrapper  php_glob_stream_wrapper;
streams/php_stream_glob_wrapper.h:PHPAPI extern php_stream_ops      php_glob_stream_ops;
streams/php_stream_glob_wrapper.h:PHPAPI char* _php_glob_stream_get_path(php_stream *stream, int copy, int *plen STREAMS_DC TSRMLS_DC);
streams/php_stream_glob_wrapper.h:PHPAPI char* _php_glob_stream_get_pattern(php_stream *stream, int copy, int *plen STREAMS_DC TSRMLS_DC);
streams/php_stream_glob_wrapper.h:PHPAPI int   _php_glob_stream_get_count(php_stream *stream, int *pflags STREAMS_DC TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI php_stream_bucket *php_stream_bucket_new(php_stream *stream, char *buf, size_t buflen, int own_buf, int buf_persistent TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_bucket_split(php_stream_bucket *in, php_stream_bucket **left, php_stream_bucket **right, size_t length TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void php_stream_bucket_delref(php_stream_bucket *bucket TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void php_stream_bucket_prepend(php_stream_bucket_brigade *brigade, php_stream_bucket *bucket TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void php_stream_bucket_append(php_stream_bucket_brigade *brigade, php_stream_bucket *bucket TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void php_stream_bucket_unlink(php_stream_bucket *bucket TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI php_stream_bucket *php_stream_bucket_make_writeable(php_stream_bucket *bucket TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void _php_stream_filter_prepend(php_stream_filter_chain *chain, php_stream_filter *filter TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_filter_prepend_ex(php_stream_filter_chain *chain, php_stream_filter *filter TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void _php_stream_filter_append(php_stream_filter_chain *chain, php_stream_filter *filter TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_filter_append_ex(php_stream_filter_chain *chain, php_stream_filter *filter TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int _php_stream_filter_flush(php_stream_filter *filter, int finish TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI php_stream_filter *php_stream_filter_remove(php_stream_filter *filter, int call_dtor TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI void php_stream_filter_free(php_stream_filter *filter TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI php_stream_filter *_php_stream_filter_alloc(php_stream_filter_ops *fops, void *abstract, int persistent STREAMS_DC TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_filter_register_factory(const char *filterpattern, php_stream_filter_factory *factory TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_filter_unregister_factory(const char *filterpattern TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI int php_stream_filter_register_factory_volatile(const char *filterpattern, php_stream_filter_factory *factory TSRMLS_DC);
streams/php_stream_filter_api.h:PHPAPI php_stream_filter *php_stream_filter_create(const char *filtername, zval *filterparams, int persistent TSRMLS_DC);
streams/php_stream_context.h:PHPAPI void php_stream_context_free(php_stream_context *context);
streams/php_stream_context.h:PHPAPI php_stream_context *php_stream_context_alloc(void);
streams/php_stream_context.h:PHPAPI int php_stream_context_get_option(php_stream_context *context,
streams/php_stream_context.h:PHPAPI int php_stream_context_set_option(php_stream_context *context,
streams/php_stream_context.h:PHPAPI int php_stream_context_get_link(php_stream_context *context,
streams/php_stream_context.h:PHPAPI int php_stream_context_set_link(php_stream_context *context,
streams/php_stream_context.h:PHPAPI int php_stream_context_del_link(php_stream_context *context,
streams/php_stream_context.h:PHPAPI php_stream_notifier *php_stream_notification_alloc(void);
streams/php_stream_context.h:PHPAPI void php_stream_notification_free(php_stream_notifier *notifier);
streams/php_stream_context.h:PHPAPI void php_stream_notification_notify(php_stream_context *context, int notifycode, int severity,
streams/php_stream_context.h:PHPAPI php_stream_context *php_stream_context_set(php_stream *stream, php_stream_context *context);
streams/php_stream_userspace.h:PHPAPI extern php_stream_ops php_stream_userspace_ops;
streams/php_stream_userspace.h:PHPAPI extern php_stream_ops php_stream_userspace_dir_ops;
streams/php_stream_mmap.h:PHPAPI char *_php_stream_mmap_range(php_stream *stream, size_t offset, size_t length, php_stream_mmap_operation_t mode, size_t *mapped_len TSRMLS_DC);
streams/php_stream_mmap.h:PHPAPI int _php_stream_mmap_unmap(php_stream *stream TSRMLS_DC);
streams/php_stream_mmap.h:PHPAPI int _php_stream_mmap_unmap_ex(php_stream *stream, off_t readden TSRMLS_DC);
php_variables.h:extern PHPAPI void (*php_import_environment_variables)(zval *array_ptr TSRMLS_DC);
php_variables.h:PHPAPI void php_register_variable(char *var, char *val, zval *track_vars_array TSRMLS_DC);
php_variables.h:PHPAPI void php_register_variable_safe(char *var, char *val, int val_len, zval *track_vars_array TSRMLS_DC);
php_variables.h:PHPAPI void php_register_variable_ex(char *var, zval *val, zval *track_vars_array TSRMLS_DC);
php_open_temporary_file.h:PHPAPI FILE *php_open_temporary_file(const char *dir, const char *pfx, char **opened_path_p TSRMLS_DC);
php_open_temporary_file.h:PHPAPI int php_open_temporary_fd_ex(const char *dir, const char *pfx, char **opened_path_p, zend_bool open_basedir_check TSRMLS_DC);
php_open_temporary_file.h:PHPAPI int php_open_temporary_fd(const char *dir, const char *pfx, char **opened_path_p TSRMLS_DC);
php_open_temporary_file.h:PHPAPI const char *php_get_temporary_directory(void);
php_open_temporary_file.h:PHPAPI void php_shutdown_temporary_directory(void);
safe_mode.h:PHPAPI int php_checkuid(const char *filename, const char *fopen_mode, int mode);
safe_mode.h:PHPAPI int php_checkuid_ex(const char *filename, const char *fopen_mode, int mode, int flags);
safe_mode.h:PHPAPI char *php_get_current_user(void);
fopen_wrappers.h:PHPAPI int php_fopen_primary_script(zend_file_handle *file_handle TSRMLS_DC);
fopen_wrappers.h:PHPAPI char *expand_filepath(const char *filepath, char *real_path TSRMLS_DC);
fopen_wrappers.h:PHPAPI char *expand_filepath_ex(const char *filepath, char *real_path, const char *relative_to, size_t relative_to_len TSRMLS_DC);
fopen_wrappers.h:PHPAPI int php_check_open_basedir(const char *path TSRMLS_DC);
fopen_wrappers.h:PHPAPI int php_check_open_basedir_ex(const char *path, int warn TSRMLS_DC);
fopen_wrappers.h:PHPAPI int php_check_specific_open_basedir(const char *basedir, const char *path TSRMLS_DC);
fopen_wrappers.h:PHPAPI int php_check_safe_mode_include_dir(const char *path TSRMLS_DC);
fopen_wrappers.h:PHPAPI char *php_resolve_path(const char *filename, int filename_len, const char *path TSRMLS_DC);
fopen_wrappers.h:PHPAPI FILE *php_fopen_with_path(const char *filename, const char *mode, const char *path, char **opened_path TSRMLS_DC);
fopen_wrappers.h:PHPAPI char *php_strip_url_passwd(char *path);
fopen_wrappers.h:PHPAPI ZEND_INI_MH(OnUpdateBaseDir);
php_logos.h:PHPAPI int php_register_info_logo(char *logo_string, const char *mimetype, const unsigned char *data, int size);
php_logos.h:PHPAPI int php_unregister_info_logo(char *logo_string);
php_output.h:PHPAPI void php_output_startup(void);
php_output.h:PHPAPI void php_output_activate(TSRMLS_D);
php_output.h:PHPAPI void php_output_set_status(zend_bool status TSRMLS_DC);
php_output.h:PHPAPI void php_output_register_constants(TSRMLS_D);
php_output.h:PHPAPI int  php_default_output_func(const char *str, uint str_len TSRMLS_DC);
php_output.h:PHPAPI int  php_ub_body_write(const char *str, uint str_length TSRMLS_DC);
php_output.h:PHPAPI int  php_ub_body_write_no_header(const char *str, uint str_length TSRMLS_DC);
php_output.h:PHPAPI int  php_body_write(const char *str, uint str_length TSRMLS_DC);
php_output.h:PHPAPI int  php_header_write(const char *str, uint str_length TSRMLS_DC);
php_output.h:PHPAPI int php_start_ob_buffer(zval *output_handler, uint chunk_size, zend_bool erase TSRMLS_DC);
php_output.h:PHPAPI int php_start_ob_buffer_named(const char *output_handler_name, uint chunk_size, zend_bool erase TSRMLS_DC);
php_output.h:PHPAPI void php_end_ob_buffer(zend_bool send_buffer, zend_bool just_flush TSRMLS_DC);
php_output.h:PHPAPI void php_end_ob_buffers(zend_bool send_buffer TSRMLS_DC);
php_output.h:PHPAPI int php_ob_get_buffer(zval *p TSRMLS_DC);
php_output.h:PHPAPI int php_ob_get_length(zval *p TSRMLS_DC);
php_output.h:PHPAPI void php_start_implicit_flush(TSRMLS_D);
php_output.h:PHPAPI void php_end_implicit_flush(TSRMLS_D);
php_output.h:PHPAPI char *php_get_output_start_filename(TSRMLS_D);
php_output.h:PHPAPI int php_get_output_start_lineno(TSRMLS_D);
php_output.h:PHPAPI void php_ob_set_internal_handler(php_output_handler_func_t internal_output_handler, uint buffer_size, char *handler_name, zend_bool erase TSRMLS_DC);
php_output.h:PHPAPI int php_ob_handler_used(char *handler_name TSRMLS_DC);
php_output.h:PHPAPI int php_ob_init_conflict(char *handler_new, char *handler_set TSRMLS_DC);
php_output.h:PHPAPI int php_ob_get_buffer(zval *p TSRMLS_DC);
php_output.h:PHPAPI int php_ob_get_length(zval *p TSRMLS_DC);
rfc1867.h:extern PHPAPI int (*php_rfc1867_callback)(unsigned int event, void *event_data, void **extra TSRMLS_DC);
php_ini.h:PHPAPI void config_zval_dtor(zval *zvalue);
php_ini.h:PHPAPI zval *cfg_get_entry(const char *name, uint name_length);
php_ini.h:PHPAPI int cfg_get_long(const char *varname, long *result);
php_ini.h:PHPAPI int cfg_get_double(const char *varname, double *result);
php_ini.h:PHPAPI int cfg_get_string(const char *varname, char **result);
php_ini.h:PHPAPI int php_parse_user_ini_file(const char *dirname, char *ini_filename, HashTable *target_hash TSRMLS_DC);
php_ini.h:PHPAPI void php_ini_activate_config(HashTable *source_hash, int modify_type, int stage TSRMLS_DC);
php_ini.h:PHPAPI int php_ini_has_per_dir_config(void);
php_ini.h:PHPAPI int php_ini_has_per_host_config(void);
php_ini.h:PHPAPI void php_ini_activate_per_dir_config(char *path, uint path_len TSRMLS_DC);
php_ini.h:PHPAPI void php_ini_activate_per_host_config(const char *host, uint host_len TSRMLS_DC);
php_ini.h:PHPAPI HashTable* php_ini_get_configuration_hash(void);
